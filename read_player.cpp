// Library implementation of read_player.cpp#include "read_player.h"float read_player(hand &dummy_hand, table &mytable, int &dummy_player){	float loss_percent, yo, k, mean, std, c, pi, e;	loss_percent = 0;	yo = 0;	k = 0;	mean = 0;	std = 0;	c = 0;	pi = 3.1459;	e = 2.7183;		if ((mytable.player[dummy_player].bet_history.rounds_0.num_calls == 1) &&		(mytable.bet_history.rounds_0.num_bets == 0))	{		switch (mytable.player[dummy_player].position)		{			case 9 :			case 8 : mean = (2 + (1 * mytable.player[dummy_player].loose));					 std = (.4 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 7 :			case 6 :			case 5 : mean = (6 + (1 * mytable.player[dummy_player].loose));					 std = (.7 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 4 :			case 3 :			case 2 : mean = (6.5 + (1 * mytable.player[dummy_player].loose));					 std = (.65 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 1 : 			case 0 : mean = (4 + (1 * mytable.player[dummy_player].loose));					 std = (1.2 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;		}	}	if ((mytable.player[dummy_player].bet_history.rounds_0.num_bets == 1) &&		(mytable.bet_history.rounds_0.num_bets == 1))	{		switch (mytable.player[dummy_player].position)		{			case 9 : 			case 8 : yo = (.00005 + (.00004 * mytable.player[dummy_player].loose));					 k = (.4 + (.05 * mytable.player[dummy_player].passive));					 loss_percent = (((10 * yo) / (yo - ((yo - 10) * (pow( e, (-1 * k * 10 * (10 - dummy_hand.rank.value))))))) / 10);					 return loss_percent;					 break;			case 7 : 			case 6 :			case 5 : yo = (.0000000005 + (.0000000004 * mytable.player[dummy_player].loose));					 k = (.4 + (.05 * mytable.player[dummy_player].passive));					 loss_percent = (((10 * yo) / (yo - ((yo - 10) * (pow( e, (-1 * k * 10 * (10 - dummy_hand.rank.value))))))) / 10);					 return loss_percent;					 break;			case 4 :			case 3 :			case 2 : yo = (.000000000005 + (.000000000004 * mytable.player[dummy_player].loose));					 k = (.35 + (.05  * mytable.player[dummy_player].passive));					 loss_percent = (((10 * yo) / (yo - ((yo - 10) * (pow( e, (-1 * k * 10 * (10 - dummy_hand.rank.value))))))) / 10);					 return loss_percent;					 break;			case 1 : yo = (.005 + (.004 * mytable.player[dummy_player].loose));					 k = (.175 + (.025 * mytable.player[dummy_player].passive));					 loss_percent = (((10 * yo) / (yo - ((yo - 10) * (pow( e, (-1 * k * 10 * (10 - dummy_hand.rank.value))))))) / 10);					 return loss_percent;					 break;			case 0 : yo = (.005 + (.004 * mytable.player[dummy_player].passive));					 k = (.35 + (.05 * mytable.player[dummy_player].passive));					 loss_percent = (((10 * yo) / (yo - ((yo - 10) * (pow( e, (-1 * k * 10 * (10 - dummy_hand.rank.value))))))) / 10);					 return loss_percent;					 break;		}	}	if ((mytable.bet_history.rounds_0.num_bets == 1) &&		(mytable.player[dummy_player].bet_history.rounds_0.num_bets != 1))	{		switch (mytable.player[dummy_player].position)		{			case 9 :			case 8 : mean = (5 + (1 * mytable.player[dummy_player].loose));					 std = (1.1 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 7 :			case 6 :			case 5 : mean = (5 + (1 * mytable.player[dummy_player].loose));					 std = (.9 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 4 :			case 3 :			case 2 : mean = (6 + (1 * mytable.player[dummy_player].loose));					 std = (.75 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 1 :			case 0 : mean = (7 + (1 * mytable.player[dummy_player].loose));					 std = (.6 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;		}	}	if ((mytable.bet_history.rounds_0.num_bets > mytable.player[dummy_player].bet_history.rounds_0.num_bets) &&		(mytable.player[dummy_player].bet_history.rounds_0.num_bets >= 1) &&		((mytable.player[dummy_player].bet_history.rounds_0.num_calls == 0) ||		((mytable.bet_history.rounds_0.num_bets == 4) && 		 (mytable.player[dummy_player].bet_history.rounds_0.num_calls == 1))))	{		switch (mytable.player[dummy_player].position)		{			case 9 :			case 8 : yo = (.000000000005 + (.000000000004 * mytable.player[dummy_player].loose));					 k = (.4 + (.05 * mytable.player[dummy_player].passive));					 loss_percent = (((10 * yo) / (yo - ((yo - 10) * (pow( e, (-1 * k * 10 * (10 - dummy_hand.rank.value))))))) / 10);					 return loss_percent;					 break;			case 7 :			case 6 :			case 5 : 			case 4 :			case 3 :			case 2 : yo = (.00000000000005 + (.00000000000004 * mytable.player[dummy_player].loose));					 k = (.4 + (.05 * mytable.player[dummy_player].passive));					 loss_percent = (((10 * yo) / (yo - ((yo - 10) * (pow( e, (-1 * k * 10 * (10 - dummy_hand.rank.value))))))) / 10);					 return loss_percent;					 break;			case 1 :			case 0 : yo = (.000000000005 + (.000000000004 * mytable.player[dummy_player].loose));					 k = (.35 + (.05 * mytable.player[dummy_player].passive));					 loss_percent = (((10 * yo) / (yo - ((yo - 10) * (pow( e, (-1 * k * 10 * (10 - dummy_hand.rank.value))))))) / 10);					 return loss_percent;					 break;		}	}	if ((mytable.player[dummy_player].bet_history.rounds_0.num_bets == 1) &&		(mytable.player[dummy_player].bet_history.rounds_0.num_calls >= 1))	{		switch (mytable.player[dummy_player].position)		{			case 9 :			case 8 : mean = (6.5 + (1 * mytable.player[dummy_player].loose));					 std = (.6 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 7 :			case 6 :			case 5 : mean = (6.5 + (1 * mytable.player[dummy_player].loose));					 std = (.75 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 4 :			case 3 :			case 2 : mean = (7 + (1 * mytable.player[dummy_player].loose));					 std = (.35 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 1 : mean = (6 + (1 * mytable.player[dummy_player].loose));					 std = (.5 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 0 : mean = (6.5 + (1 * mytable.player[dummy_player].loose));					 std = (.4 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;		}	}	if ((mytable.player[dummy_player].bet_history.rounds_0.num_calls > 0) &&		(mytable.player[dummy_player].bet_history.rounds_0.num_bets == 0))	{		switch (mytable.player[dummy_player].position)		{			case 9 :			case 8 : mean = (6 + (1 * mytable.player[dummy_player].loose));					 std = (.8 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 7 :			case 6 :			case 5 : mean = (6.5 + (1 * mytable.player[dummy_player].loose));					 std = (.7 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 4 :			case 3 :			case 2 : mean = (6.5 + (1 * mytable.player[dummy_player].loose));					 std = (.9 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 1 : mean = (5 + (1 * mytable.player[dummy_player].loose));					 std = (.8 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;			case 0 : mean = (5.5 + (1 * mytable.player[dummy_player].loose));					 std = (.7 + (-.1 * mytable.player[dummy_player].passive));					 c = (pow( (2 * pi), ((1 / 2)) * std ));					 loss_percent = ((1 / (pow( (2 * pi), ((1 / 2) * std )))) * (pow( e, pow( (((-1 / 2) * ((10 - dummy_hand.rank.value) - mean)) / std), 2 ) )));					 return loss_percent;					 break;		}	}	return loss_percent;}