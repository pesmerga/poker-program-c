// Library implementation of get_action.cpp// get_action takes a table with a currentplayer selected and determines// the action that players wants to take. It looks at a player's character// input under player[].action, when 'f' is fold, 'c' is call, 'b' is bet,// 'e' is un-declared, and any other character is an error.#include "get_action.h"table get_action(table &mytable){			switch(mytable.player[(mytable.currentplayer)].action)	{				// When the player's action is 'b', the number of bets in the round		// increases by 1 and that player is recognized as the lastraiser.				case 'b':			mytable.betsinround++;			mytable.lastraiser = mytable.currentplayer;						switch(mytable.rounds)			{							// According to the current round to which the player bet, 				// the number of bets played by that player in that round 				// increases by 1 along with the total number of bets in that 				// round.								case 0 :					mytable.player[(mytable.currentplayer)].bet_history.rounds_0.num_bets++;					mytable.bet_history.rounds_0.num_bets++;										break;				case 1 :					mytable.player[(mytable.currentplayer)].bet_history.rounds_1.num_bets++;					mytable.bet_history.rounds_1.num_bets++;					break;				case 2 :					mytable.player[(mytable.currentplayer)].bet_history.rounds_2.num_bets++;					mytable.bet_history.rounds_2.num_bets++;					break;				case 3 :					mytable.player[(mytable.currentplayer)].bet_history.rounds_3.num_bets++;					mytable.bet_history.rounds_3.num_bets++;					break;			}						// The player's money is decreased by the amount in which the pot 			// is increased.						// The pot is increased by the number of bets already made in the 			// round minus the number of bets the player had previously put into 			// the pot multiplied by the bet_level.						mytable.pot = (mytable.pot) + ((mytable.betsinround) -				(mytable.player[(mytable.currentplayer)].betsthisround))				* (mytable.bet_level);			mytable.player[(mytable.currentplayer)].money = 				(mytable.player[(mytable.currentplayer)].money) 				- ((mytable.betsinround) 				- (mytable.player[(mytable.currentplayer)].betsthisround))				* (mytable.bet_level);			mytable.player[(mytable.currentplayer)].betsthisround = mytable.betsinround;			break;							case 'c':						// The player who has called has their funds decreased by the amount 			// in which the pot increased.			mytable.pot = (mytable.pot) + ((mytable.betsinround) -				(mytable.player[(mytable.currentplayer)].betsthisround))				* (mytable.bet_level);			mytable.player[(mytable.currentplayer)].money = 				(mytable.player[(mytable.currentplayer)].money) 				- ((mytable.betsinround) 				- (mytable.player[(mytable.currentplayer)].betsthisround))				* (mytable.bet_level);			mytable.player[(mytable.currentplayer)].betsthisround = mytable.betsinround;			switch(mytable.rounds)			{								// According to the current round in whihc the player made the call, 				// the number of calls made during that round is increased by 1 and 				// the same is done to the number of calls that player made during 				// that round.				case 0 :					mytable.player[(mytable.currentplayer)].bet_history.rounds_0.num_calls++;					mytable.bet_history.rounds_0.num_calls++;										break;				case 1 :					mytable.player[(mytable.currentplayer)].bet_history.rounds_1.num_calls++;					mytable.bet_history.rounds_1.num_calls++;					break;				case 2 :					mytable.player[(mytable.currentplayer)].bet_history.rounds_2.num_calls++;					mytable.bet_history.rounds_2.num_calls++;					break;				case 3 :					mytable.player[(mytable.currentplayer)].bet_history.rounds_3.num_calls++;					mytable.bet_history.rounds_3.num_calls++;					break;			}			break;								case 'f':					// The current player who has folded has his boolean variable, folded, set 			// equal to 1 and the round in which they folded is stored. Along with that, 			// their big and small card values and suits are set to equal to -1.						mytable.player[(mytable.currentplayer)].folded = 1;			mytable.player[(mytable.currentplayer)].bet_history.folded = mytable.rounds;			mytable.player[(mytable.currentplayer)].big.value = -1;			mytable.player[(mytable.currentplayer)].big.suit = -1;			mytable.player[(mytable.currentplayer)].small.value = -1;			mytable.player[(mytable.currentplayer)].small.suit = -1;			break;	}	return mytable;}		