// Library implementation of deal.cpp// deal is a function that takes a deck of cards that takes a deck of// cards that has been shuffled and deals them out to all the players// at the table that are not empty starting at the player to the right// of the dealer. If the player or chair is empty, it is given a big// card value and suit along with snall card of -1. The community// cards are then dealt after all the cards had been dealth to the// players.#include "deal.h"table deal(deck &mydeck, table &mytable){	int i, j;	j = 0;		// Starts from the first available player to the right of the	// dealer.		mytable.currentplayer = ((mytable.dealer + 1) % 10);		// Deals the big card to the players from mydeck.cards[].		for (i = 0; i < 10; i++)	{		if (mytable.player[(mytable.currentplayer)].empty == 1)		{			mytable.player[(mytable.currentplayer)].big.value = -1;			mytable.player[(mytable.currentplayer)].big.suit = -1;			mytable.currentplayer = ((mytable.currentplayer + 1) % 10);		}		else		{			mytable.player[(mytable.currentplayer)].big = mydeck.cards[j];			mytable.currentplayer = ((mytable.currentplayer + 1) % 10);			j++;		}	}		// Deals the small card to the player from the mydeck.cards[] that	// are left from the deal of the big cards.		for (i = 0; i < 10; i++)	{		if (mytable.player[(mytable.currentplayer)].empty == 1)		{			mytable.player[(mytable.currentplayer)].small.value = -1;			mytable.player[(mytable.currentplayer)].small.suit = -1;			mytable.currentplayer = ((mytable.currentplayer + 1) % 10);		}		else		{			mytable.player[(mytable.currentplayer)].small = mydeck.cards[j];			j++;			mytable.currentplayer = ((mytable.currentplayer + 1) % 10);		}	}		// Deals the community cards for the table from the cards left in 	// mydeck.cards[] after the cards to the players had been dealt.		for (i = 0; i < 5; i++)	{		mytable.community[i] = mydeck.cards[j];		j++;	}	return mytable;}