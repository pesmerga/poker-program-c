// Library Implementation of round_3.cpp#include "round_3.h"// round_3 runs the 3rd post flop round if that may occur. Along// with prompting all the usual actions, if the game comes down// to a showdown, this function will run the code to determine a// winner.table round_3(table &mytable){	apstring continue_play;	update_player(mytable);	int k, j;		print_table(mytable);	cout << "Type in anything and hit enter to continue play.";	cin >> continue_play;	cout << endl;	k = 1;		while ((((mytable.currentplayer != mytable.lastraiser) && (mytable.betsinround > 0)) ||			 (mytable.betsinround == 0) && (mytable.player[(mytable.lastraiser)].action == 'e')) &&			(k == 1))	{		j = 1;		if ((last_standing(mytable)) < 0)		{					if ((mytable.player[(mytable.currentplayer)].folded == 1) ||				(mytable.player[(mytable.currentplayer)].empty == 1))			{			}			else			{						if (mytable.currentplayer == mytable.human)				{					print_table(mytable);					cout << "Bet(b), Call or Check(c), or Fold(f): ";					cin >> mytable.player[(mytable.human)].action;					cout << endl;										if (mytable.player[(mytable.human)].action == 'b')					{						if (mytable.betsinround == 4)						{							cout << "This is the 4th round of betting and you can no longer bet. Choose again." << endl;							mytable.player[(mytable.currentplayer)].action = 'e';							j = 0;						}						else						{							get_action(mytable);							print_table(mytable);							cout << "Type in anything and hit enter to continue play.";							cin >> continue_play;							cout << endl;						}					}					if ((mytable.player[(mytable.human)].action == 'c') || 						(mytable.player[(mytable.human)].action == 'f'))					{						get_action(mytable);						print_table(mytable);						cout << "Type in anything and hit enter to continue play.";						cin >> continue_play;						cout << endl;					}					if ((mytable.player[(mytable.human)].action != 'b') &&						(mytable.player[(mytable.human)].action != 'c') &&						(mytable.player[(mytable.human)].action != 'f'))					{						cout << "That is not a legal function. Choose again." << endl;						mytable.player[(mytable.currentplayer)].action = 'e';						j = 0;					}				}				if (mytable.currentplayer != mytable.human)				{					bet_4th(mytable);							get_action(mytable);					print_table(mytable);					cout << "Type in anything and hit enter to continue play.";					cin >> continue_play;					cout << endl;				}			}			if (j == 1)			{				mytable.currentplayer = ((mytable.currentplayer + 1) % 10);			}		}		if ((last_standing(mytable)) >= 0)		{			mytable.player[(last_standing(mytable))].money =				(mytable.pot + mytable.player[(last_standing(mytable))].money);			k = 0;		}			}		// If the 3rd post flop round ends and enters the showdown, the	// following code is processed.			if (k == 1)	{		int winner_is_you, winners[10], i;		float best_hand;				mytable.rounds = 4;		best_hand = 0;		j = 0;				// Make every player on the table have a "winner[]" value		// of 0.				for (i = 0; i < 10; i++)				{						winners[i] = 0;				}				// Determines who has the strongest hand of the remaining		// players.						for (i = 0; i < 10; i++)				{									// Skip the player is they have folded or that seat is			// empty.						if ((mytable.player[i].empty == 1) ||				(mytable.player[i].folded == 1))						{						}						// If the current player being observed is still in the			// game, determine that player's hand strength and, if			// their hand strength is equal or greater than the 			// previous best hand strength, mark that player as a			// winner.						else						{								hand_worth(mytable.player[i], mytable);								if (mytable.player[i].type > best_hand)								{										best_hand = mytable.player[i].type;										winners[i] = 1;					winner_is_you = i;					if (i == 0)										{										}										else										{												for (j = 0; j < i; j++)						{														winners[j] = 0;						}										}			 				}								if (mytable.player[i].type == best_hand)				{										winners[i] = 1;								}						}				}				j = 0;				// Determines the number of winners.						for (i = 0; i < 10; i++)				{						j = (winners[i] + j);				}				// Gives the money to the appropiate player(s).						for (i = 0; i < 10; i++)				{						if (winners[i] == 0)						{						}						else						{								mytable.player[i].money = 					(mytable.player[i].money + (mytable.pot / float(j)));								int(mytable.player[i].money);						}				}				// Prints out the lines of code displaying who the winner was		// and what that winner won with, hand value wise.		// (NOTE: The print out displays a numberical value, not a hand		// or name.)				int q = 0;		for (i = 0; i < 10; i++)		{			if ((winners[i] > 0) &&				(q != 0))			{				cout << ", " << mytable.player[i].name << " ";			}			if ((winners[i] > 0) &&				(q == 0))			{				cout << mytable.player[i].name;				q++;			}		}				if (j == 1)		{ 										cout << " has won with a " << mytable.player[(winner_is_you)].type << "!" << endl;				}		else		{			cout << " have won with a " << mytable.player[(winner_is_you)].type << "!" << endl;		}				print_table(mytable);							cout << "Type in anything to continue to next game.";				cin >> continue_play;				cout << endl;				loose_passive(mytable);				return mytable;		}		if (mytable.rounds == 3)		{				loose_passive(mytable);		}		return mytable;}