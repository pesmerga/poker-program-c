// Library implementation of update_player.cpp#include "update_player.h"// update_player takes a given table that has entered a new game // or round of play and sets variables like dealer and last raiser // positions for the round/game and resets variables like bets in // round, pot, etc.table update_player(table &mytable){	int i, j, k;		mytable.betsinround = 1;		// If it is the pre-flop or 1st post-flop round, set the bet_level 	// to the small bet number. Otherwise, set the bet_level to the 	// big bet number.		if (mytable.rounds <= 1)	{		mytable.bet_level = 2;	}	else	{		mytable.bet_level = 4;	}		// The following series of resettings and settings of variables 	// is done for the occassion when update_player is run before a 	// new game has started.		if (mytable.rounds == 0)	{					// All the information in the bet_history structure is reset 		// to 0 and 1 is added to the total number of plays.				mytable.bet_history.rounds_0.num_calls = 0;		mytable.bet_history.rounds_1.num_calls = 0;		mytable.bet_history.rounds_2.num_calls = 0;		mytable.bet_history.rounds_3.num_calls = 0;		mytable.bet_history.rounds_0.num_bets = 0;		mytable.bet_history.rounds_1.num_bets = 0;		mytable.bet_history.rounds_2.num_bets = 0;		mytable.bet_history.rounds_3.num_bets = 0;		mytable.plays++;				i = 0;		while (i == 0)		{						// The dealer chip is moved to the left-most, non-empty 			// player to the dealer in the last round.						if (mytable.player[((mytable.dealer + 1) % 10)].empty == 1)			{				mytable.dealer = ((mytable.dealer + 1) % 10);			}			else			{				mytable.dealer = ((mytable.dealer + 1) % 10);				i++;			}		}				for (i = 0; i < 10; i++)		{						// The data in the structure hand for each player is set to 0,			// except for rank, action, predicted and actual action, and 			// folded. Rank value is set to 9 and kind is made 10. All the 			// character values like action, predicted action, etc. are set 			// to 'e'. Finally, folded, a boolean, is set to -1. After all 			// of this is done, that hand structure or player's two cards 			// are sorted using the function sort().						mytable.player[i].betsthisround = 0;			mytable.player[i].folded = 0;			mytable.player[i].suited = 0;			mytable.player[i].rank.value = 9;			mytable.player[i].rank.kind = 10;			mytable.player[i].special = 0;			mytable.player[i].action = 'e';			mytable.player[i].worth = 0;			mytable.player[i].type = 0;			mytable.player[i].bet_history.rounds_0.num_bets = 0;			mytable.player[i].bet_history.rounds_1.num_bets = 0;			mytable.player[i].bet_history.rounds_2.num_bets = 0;			mytable.player[i].bet_history.rounds_3.num_bets = 0;												mytable.player[i].bet_history.rounds_0.num_calls = 0;			mytable.player[i].bet_history.rounds_1.num_calls = 0;			mytable.player[i].bet_history.rounds_2.num_calls = 0;			mytable.player[i].bet_history.rounds_3.num_calls = 0;			mytable.player[i].bet_history.predicted = 'e';			mytable.player[i].bet_history.actual = 'e';			mytable.player[i].bet_history.folded = -1;			sort(mytable.player[i]);		}				// current_player, the player that is currently being observed, is 		// set to the player who is three seats to the left or more from the 		// dealer depending on what seats are empty.				i = 0;		mytable.currentplayer = ((mytable.dealer + 3) % 10);		while (i != 1)		{			if (mytable.player[(mytable.currentplayer)].empty == 1)			{				mytable.currentplayer = ((mytable.currentplayer + 1) % 10);			}			else			{				i = 1;			}		}				// last_raiser, the player who last raised, is set to the player two 		// or more seats to the left of the dealer depending on what seats are 		// empty.				i = 0;		mytable.lastraiser = ((mytable.dealer + 2) % 10);		while (i != 1)		{			if (mytable.player[(mytable.lastraiser)].empty == 1)			{				mytable.lastraiser = ((mytable.lastraiser - 1) % 10);			}			else			{				i = 1;			}		}				// This code sets the small and big blinds, the first two players to the 		// left of the dealer. The small blind had half of a small bet put in 		// the pot and his/her betsthisround set to .5 (half a bet). The big blind 		// has a whole small bet taken from his/her bankroll and put into the pot 		// and their betsthisround is set to 1 (a whole bet).				j = 2;		k = 1;		i = 0;		while (i != 1)		{			if ((mytable.player[((mytable.dealer + k) % 10)].empty == 1) &&				(k == (j - 1)))			{				j++;				k++;			}			if (mytable.player[((mytable.dealer + k) % 10)].empty == 1)			{				k++;			}			if (mytable.player[((mytable.dealer + j) % 10)].empty == 1)			{				j++;			}			else			{				mytable.player[((mytable.dealer + k) % 10)].money = 					mytable.player[((mytable.dealer + k) % 10)].money - (mytable.bet_level * .5);				mytable.player[((mytable.dealer + k) % 10)].betsthisround = .5;				mytable.player[((mytable.dealer + j) % 10)].money =					mytable.player[((mytable.dealer + j) % 10)].money - (mytable.bet_level);				mytable.player[((mytable.dealer + j) % 10)].betsthisround = 1;				i = 1;			}		}				// The pot is set to equal one and a half of a small bet.				mytable.pot = (1.5 * mytable.bet_level);	}		// The following is code for the instance in which update_player is run at the 	// beginning of rounds 1, 2, or 3 (the post-flop rounds).		else	{				// A player that had folded has his/her betsthisround set to equal 0, while 		// a player that is still playing has betsthisround set to 0 and their action 		// set to 'e'.				mytable.betsinround = 0;		for (i = 0; i < 10; i++)		{			if (mytable.player[i].folded == 1)			{				mytable.player[i].betsthisround = 0;			}			else			{				mytable.player[i].action = 'e';				mytable.player[i].betsthisround = 0;			}		}				// The current_player or player the closest to the left of the dealer chip is 		// found and set.				i = 0;		j = 1;		while (i != 1)		{			mytable.currentplayer = ((mytable.dealer + j) % 10);			if ((mytable.player[(mytable.currentplayer)].folded == 1) ||				(mytable.player[(mytable.currentplayer)].empty == 1))			{				j++;			}			else			{				i = 1;			}		}				// The last_raiser or the player who controls or is the right-most to the 		// dealer chip is set.				i = 0;		j = 0;		while (i != 1)		{			mytable.lastraiser = (mytable.dealer - j);			if (mytable.lastraiser < 0)			{				mytable.lastraiser =					(10 + mytable.lastraiser);			}			if ((mytable.player[(mytable.lastraiser)].folded == 1) ||				(mytable.player[(mytable.lastraiser)].empty == 1))			{				j++;			}			else			{				i = 1;			}		}	}	return mytable;}