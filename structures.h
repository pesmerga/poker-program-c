// Library Header File: structures.h ****V1.01****#ifndef structures#include <iostream.h>#include <iomanip.h>#include <stdlib.h>#include "apstring.h"#include "apmatrix.h"// Structures used throughout the programstruct card{	int value;		// Value of the card (2, Ace, Queen, .etc) (note: this is represented as an integer)	int suit;		// The suit of the card (Heart, Spade, .etc) (note: this is represented as an integer)};struct ranks{	int value;		// Rank according to how well his hand plays	int kind;		// The type of hand the player is holding};struct deck{	card cards[52];};struct action{	int num_bets;	// Number of bets made	int num_calls;	// Number of calls made};struct history{	action rounds_0;	// Actions done in round 0	action rounds_1;	// Actions done in round 1	action rounds_2;	// Actions done in round 2	action rounds_3;	// Actions done in round 3	int folded;		// The round in which the player folded if they folded	char predicted;	// Predicted action of that player	char actual;	// The action that player actual did};struct style{	float loose;	// Looseness of how that player plays	float passive;	// Passivenes of how that player plays};struct hand{	card big;		// The player's hand in sorted order with the card Big being of a higher	card small;		// or equal value of the card Small	int suited;		// A value set that shows if the hand's suit equal	int special;	// An integer for special cases, which should be regarded in specific situations	ranks rank;		// The rankings of the players hand according by value and kind	int position;	// Where the player is sitting at the table	float money;	// The amount of $ a certain player has. If this is 0, the player is considered empty.	bool folded;	// Has the player recently folded	apstring name;	// The player's name sitting in the seat	float betsthisround;	// The # of bets this player has made	char action;	// The action the player is planning to do (bet, fold, call, etc.)	float loose;	// The percentage gauge of how loose or tight a player is	float passive;	// The percentage gauge of how aggressive or passive a player is	bool empty;		// Tells whether or not the certain seat is empty	float worth;	// The % of hands your overall hand can defeat	float type;		// The type of hand you have after flop, etc. (3 of a kind, flush, etc.)	float expected_worth;	// The % of hands your overall hand can defeat given what could come next in the 4th or 5th street	history bet_history;	// The player history of betting in the pre-flop	style personality;	// The player's original playing patterns or personality};struct table{	float bet_level;	// The amount of money a player bets per bet	hand player[10];	// The players sitting at the table	int currentplayer;	// The player currently in question	int lastraiser;		// The player who has last bet, raised, or reraised	int dealer;			// This is the player with the position 9	int human;			// The human is the player that the human has control of	card community[5]; 	// The cards that are on the table	float betsinround;	// Total # of bets made this round	float pot;			// Amount of money in the pot at any given time	float loose;		// The percentage gauge of how loose or tighat a table is	float passive;		// The percentage gauge of how passive or aggressive a table is	int rounds;			// The round (i.e. flop, the river, etc.)	history bet_history;	// The table's betting history	float plays;		// The amount of hands played during the current session};#define structures#endif