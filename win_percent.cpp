// Library implementation of win_percent.cpp#include "win_percent.h"hand win_percent(hand &myhand, table &mytable){	deck new_deck;	hand dummy_hand;	float wins, total;	wins = 0;	total = 0;	dummy_hand.type = 0;	myhand.worth = 0;		hand_worth((myhand), mytable); 	create_deck(new_deck);		int i, j, k;		for (k = 0; k < 10; k++)	{			if ((mytable.player[k].folded == 1) ||			(mytable.player[k].empty == 1) ||			(mytable.player[k].position == mytable.player[(mytable.currentplayer)].position))		{		}		else		{			for (i = 0; i < 52; i++)			{				if (mytable.rounds == 1)				{					if (((new_deck.cards[i].value == mytable.community[0].value) && (new_deck.cards[i].suit == mytable.community[0].suit)) ||					    ((new_deck.cards[i].value == mytable.community[1].value) && (new_deck.cards[i].suit == mytable.community[1].suit)) ||					    ((new_deck.cards[i].value == mytable.community[2].value) && (new_deck.cards[i].suit == mytable.community[2].suit)) ||					    ((new_deck.cards[i].value == myhand.big.value) && (new_deck.cards[i].suit == myhand.big.suit)) ||					    ((new_deck.cards[i].value == myhand.small.value) && (new_deck.cards[i].suit == myhand.small.suit)))					{					}					else					{							dummy_hand.small = new_deck.cards[i];						for (j = 0; j < 52; j++)						{							if (((new_deck.cards[j].value == mytable.community[0].value) && (new_deck.cards[j].suit == mytable.community[0].suit)) ||							    ((new_deck.cards[j].value == mytable.community[1].value) && (new_deck.cards[j].suit == mytable.community[1].suit)) ||							    ((new_deck.cards[j].value == mytable.community[2].value) && (new_deck.cards[j].suit == mytable.community[2].suit)) ||							    ((new_deck.cards[j].value == myhand.big.value) && (new_deck.cards[j].suit == myhand.big.suit)) ||							    ((new_deck.cards[j].value == myhand.small.value) && (new_deck.cards[j].suit == myhand.small.suit)) ||								((new_deck.cards[j].value == dummy_hand.small.value) && (new_deck.cards[j].suit == dummy_hand.small.suit)))					    							{							}							else							{								dummy_hand.big = new_deck.cards[j];								sort(dummy_hand);								suited(dummy_hand);								ranking(dummy_hand);								hand_worth(dummy_hand, mytable);								if (myhand.type > dummy_hand.type)								{									wins = (wins + (read_player(dummy_hand, mytable, k)));								}								if (myhand.type == dummy_hand.type)								{									wins = (wins + ((read_player(dummy_hand, mytable, k)) / 2));								}								total = (total + (read_player(dummy_hand, mytable, k)));							}						}					}				}				if (mytable.rounds == 2)				{							if (((new_deck.cards[i].value == mytable.community[0].value) && (new_deck.cards[i].suit == mytable.community[0].suit)) ||						((new_deck.cards[i].value == mytable.community[1].value) && (new_deck.cards[i].suit == mytable.community[1].suit)) ||					    ((new_deck.cards[i].value == mytable.community[2].value) && (new_deck.cards[i].suit == mytable.community[2].suit)) ||					    ((new_deck.cards[i].value == mytable.community[3].value) && (new_deck.cards[i].suit == mytable.community[3].suit)) ||					    ((new_deck.cards[i].value == myhand.big.value) && (new_deck.cards[i].suit == myhand.big.suit)) ||		   			    ((new_deck.cards[i].value == myhand.small.value) && (new_deck.cards[i].suit == myhand.small.suit)))					{						}					else					{						dummy_hand.small = new_deck.cards[i];						for (j = 0; j < 52; j++)						{							if (((new_deck.cards[j].value == mytable.community[0].value) && (new_deck.cards[j].suit == mytable.community[0].suit)) ||								((new_deck.cards[j].value == mytable.community[1].value) && (new_deck.cards[j].suit == mytable.community[1].suit)) ||								((new_deck.cards[j].value == mytable.community[2].value) && (new_deck.cards[j].suit == mytable.community[2].suit)) ||								((new_deck.cards[j].value == mytable.community[3].value) && (new_deck.cards[j].suit == mytable.community[3].suit)) ||								((new_deck.cards[j].value == myhand.big.value) && (new_deck.cards[j].suit == myhand.big.suit)) ||								((new_deck.cards[j].value == myhand.small.value) && (new_deck.cards[j].suit == myhand.small.suit)) ||								((new_deck.cards[j].value == dummy_hand.small.value) && (new_deck.cards[j].suit == dummy_hand.small.suit)))							{							}							else							{								dummy_hand.big = new_deck.cards[j];								sort(dummy_hand);								suited(dummy_hand);								ranking(dummy_hand);								hand_worth(dummy_hand, mytable);								if (myhand.type > dummy_hand.type)								{									wins = (wins + (read_player(dummy_hand, mytable, k)));								}								if (myhand.type == dummy_hand.type)								{									wins = (wins + ((read_player(dummy_hand, mytable, k)) / 2));								}								total = (total + (read_player(dummy_hand, mytable, k)));							}						}					}				}						if (mytable.rounds == 3)				{					if (((new_deck.cards[i].value == mytable.community[0].value) && (new_deck.cards[i].suit == mytable.community[0].suit)) ||						((new_deck.cards[i].value == mytable.community[1].value) && (new_deck.cards[i].suit == mytable.community[1].suit)) ||						((new_deck.cards[i].value == mytable.community[2].value) && (new_deck.cards[i].suit == mytable.community[2].suit)) ||						((new_deck.cards[i].value == mytable.community[3].value) && (new_deck.cards[i].suit == mytable.community[3].suit)) ||						((new_deck.cards[i].value == mytable.community[4].value) && (new_deck.cards[i].suit == mytable.community[4].suit)) ||						((new_deck.cards[i].value == myhand.big.value) && (new_deck.cards[i].suit == myhand.big.suit)) ||						((new_deck.cards[i].value == myhand.small.value) && (new_deck.cards[i].suit == myhand.small.suit)))					{					}					else					{							dummy_hand.small = new_deck.cards[i];						for (j = 0; j < 52; j++)						{							if (((new_deck.cards[j].value == mytable.community[0].value) && (new_deck.cards[j].suit == mytable.community[0].suit)) ||								((new_deck.cards[j].value == mytable.community[1].value) && (new_deck.cards[j].suit == mytable.community[1].suit)) ||								((new_deck.cards[j].value == mytable.community[2].value) && (new_deck.cards[j].suit == mytable.community[2].suit)) ||								((new_deck.cards[j].value == mytable.community[3].value) && (new_deck.cards[j].suit == mytable.community[3].suit)) ||								((new_deck.cards[j].value == mytable.community[4].value) && (new_deck.cards[j].suit == mytable.community[4].suit)) ||								((new_deck.cards[j].value == myhand.big.value) && (new_deck.cards[j].suit == myhand.big.suit)) ||							  	((new_deck.cards[j].value == myhand.small.value) && (new_deck.cards[j].suit == myhand.small.suit)) ||								((new_deck.cards[j].value == dummy_hand.small.value) && (new_deck.cards[j].suit == dummy_hand.small.suit)))							{							}							else							{								dummy_hand.big = new_deck.cards[j];								sort(dummy_hand);								suited(dummy_hand);								ranking(dummy_hand);								hand_worth(dummy_hand, mytable);								if (myhand.type > dummy_hand.type)								{									wins = (wins + (read_player(dummy_hand, mytable, k)));								}								if (myhand.type == dummy_hand.type)								{									wins = (wins + ((read_player(dummy_hand, mytable, k)) / 2));								}								total = (total + (read_player(dummy_hand, mytable, k)));							}						}					}				}			}		}	}	myhand.worth = (wins / total);			return myhand;}