// Library implementation of expected_value.cpp#include "expected_value.h"table expected_value(table &mytable){	int i, j;	deck new_deck;		card temp_card1, temp_card2;		mytable.player[(mytable.currentplayer)].expected_worth = 0;	create_deck(new_deck);		switch (mytable.rounds)	{		case 1 :							temp_card1 = mytable.community[3];						for (i = 0; i < 52; i++)			{				if (((new_deck.cards[i].value == mytable.community[0].value) && (new_deck.cards[i].suit == mytable.community[0].suit)) ||				    ((new_deck.cards[i].value == mytable.community[1].value) && (new_deck.cards[i].suit == mytable.community[1].suit)) ||				    ((new_deck.cards[i].value == mytable.community[2].value) && (new_deck.cards[i].suit == mytable.community[2].suit)) ||			    	((new_deck.cards[i].value == mytable.player[(mytable.currentplayer)].big.value) && (new_deck.cards[i].suit == mytable.player[(mytable.currentplayer)].big.suit)) ||				    ((new_deck.cards[i].value == mytable.player[(mytable.currentplayer)].small.value) && (new_deck.cards[i].suit == mytable.player[(mytable.currentplayer)].small.suit)))				{				}				else				{					mytable.community[3] = new_deck.cards[i];					mytable.rounds = 2;					win_percent(mytable.player[(mytable.currentplayer)], mytable);					mytable.player[(mytable.currentplayer)].expected_worth = (mytable.player[(mytable.currentplayer)].worth + mytable.player[(mytable.currentplayer)].expected_worth);										temp_card2 = mytable.community[4];										for (j = 0; j < 10; j++)					{						if (((new_deck.cards[i].value == mytable.community[0].value) && (new_deck.cards[i].suit == mytable.community[0].suit)) ||					   		((new_deck.cards[i].value == mytable.community[1].value) && (new_deck.cards[i].suit == mytable.community[1].suit)) ||						   	((new_deck.cards[i].value == mytable.community[2].value) && (new_deck.cards[i].suit == mytable.community[2].suit)) ||			   				((new_deck.cards[i].value == mytable.community[3].value) && (new_deck.cards[i].suit == mytable.community[3].suit)) ||			  		  		((new_deck.cards[i].value == mytable.player[(mytable.currentplayer)].big.value) && (new_deck.cards[i].suit == mytable.player[(mytable.currentplayer)].big.suit)) ||			   		 		((new_deck.cards[i].value == mytable.player[(mytable.currentplayer)].small.value) && (new_deck.cards[i].suit == mytable.player[(mytable.currentplayer)].small.suit)))			   		 	{			   		 	}			   		 	else			   		 	{			   		 		mytable.community[4] = new_deck.cards[j];			   		 		mytable.rounds = 3;			   		 		win_percent(mytable.player[(mytable.currentplayer)], mytable);			   		 		mytable.player[(mytable.currentplayer)].expected_worth = (mytable.player[(mytable.currentplayer)].worth + mytable.player[(mytable.currentplayer)].expected_worth);			   		 	}			   		}					mytable.rounds = 1;				}			}						mytable.community[3] = temp_card1;			mytable.community[4] = temp_card2;			mytable.player[(mytable.currentplayer)].expected_worth = 				(mytable.player[(mytable.currentplayer)].expected_worth / (47));			break;				case 2 :					temp_card1 = mytable.community[4];						for (i = 0; i < 52; i++)			{				if (((new_deck.cards[i].value == mytable.community[0].value) && (new_deck.cards[i].suit == mytable.community[0].suit)) ||			   		((new_deck.cards[i].value == mytable.community[1].value) && (new_deck.cards[i].suit == mytable.community[1].suit)) ||				   	((new_deck.cards[i].value == mytable.community[2].value) && (new_deck.cards[i].suit == mytable.community[2].suit)) ||			   		((new_deck.cards[i].value == mytable.community[3].value) && (new_deck.cards[i].suit == mytable.community[3].suit)) ||			    	((new_deck.cards[i].value == mytable.player[(mytable.currentplayer)].big.value) && (new_deck.cards[i].suit == mytable.player[(mytable.currentplayer)].big.suit)) ||			    	((new_deck.cards[i].value == mytable.player[(mytable.currentplayer)].small.value) && (new_deck.cards[i].suit == mytable.player[(mytable.currentplayer)].small.suit)))				{				}				else				{					mytable.community[4] = new_deck.cards[i];					mytable.rounds = 3;					win_percent(mytable.player[(mytable.currentplayer)], mytable);					mytable.player[(mytable.currentplayer)].expected_worth = (mytable.player[(mytable.currentplayer)].worth + mytable.player[(mytable.currentplayer)].expected_worth);					mytable.rounds = 2;								}			}						mytable.community[4] = temp_card1;			mytable.player[(mytable.currentplayer)].expected_worth =				(mytable.player[(mytable.currentplayer)].expected_worth / 46);			break;				}	return mytable;}